require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const path = require("path");

// Fayllarni yuklash
const books = require("./books.json");
const ads = require("./ads.json");

// Konfiguratsiya
const TOKEN = process.env.BOT_TOKEN;
const MONITORING_TOKEN = process.env.MONITORING_BOT_TOKEN;
const ADMIN_IDS = process.env.ADMIN_ID.split(",").map((id) => id.trim());
const MONITORING_CHAT_ID = process.env.MONITORING_CHAT_ID;
const CHANNEL_LINK = "https://t.me/KinolarTarjimaFantastikYangiKino";

// Botlarni yaratish
const bot = new TelegramBot(TOKEN, { polling: true });
const monitoringBot = new TelegramBot(MONITORING_TOKEN, { polling: true });

// Foydalanuvchilar faylini yaratish (agar mavjud bo'lmasa)
if (!fs.existsSync(path.join(__dirname, "users.json"))) {
  fs.writeFileSync(path.join(__dirname, "users.json"), JSON.stringify([], null, 2));
}

// Ma'lumotlar
let users = require("./users.json");
const monitoringMessages = new Map(); // Monitoring xabarlarini saqlash

// Vaqtinchalik ma'lumotlar
const waitingForBook = {};
const waitingForAd = {};

// Til matnlari
const translations = {
  uz: {
    welcome: "Assalomu alaykum! Botimizga xush kelibsiz. Iltimos, tilni tanlang:",
    languageSelected: "Til tanlandi!",
    chooseLanguage: "Tilni tanlang:",
    noPermission: "‚ùå Sizda bunday buyruqni bajarish huquqi yo'q.",
    bookNotFound: "‚ùå Kitob topilmadi.",
    back: "üîô Orqaga",
    mainMenu: "üè† Asosiy menyu",
    searchBook: "üìö Kitob qidirish",
    allBooks: "üìÇ Barcha kitoblar",
    settings: "‚öôÔ∏è Sozlamalar",
    contactInfo: "Adminlar bilan bog'lanish uchun:\nüìû Telefon: +998974634455\nüì≤ Telegram: @Sadikov001",
    bookAdded: "‚úÖ Kitob qo'shildi!",
    adSent: "‚úÖ Reklama yuborildi!",
    adCanceled: "‚ùå Reklama bekor qilindi."
  },
  ru: {
    welcome: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    languageSelected: "–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω!",
    chooseLanguage: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
    noPermission: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
    bookNotFound: "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
    back: "üîô –ù–∞–∑–∞–¥",
    mainMenu: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    searchBook: "üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏",
    allBooks: "üìÇ –í—Å–µ –∫–Ω–∏–≥–∏",
    settings: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    contactInfo: "–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +998974634455\nüì≤ Telegram: @Sadikov001",
    bookAdded: "‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
    adSent: "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
    adCanceled: "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
  },
  en: {
    welcome: "Hello! Welcome to our bot. Please choose language:",
    languageSelected: "Language selected!",
    chooseLanguage: "Choose language:",
    noPermission: "‚ùå You don't have permission.",
    bookNotFound: "‚ùå Book not found.",
    back: "üîô Back",
    mainMenu: "üè† Main menu",
    searchBook: "üìö Search book",
    allBooks: "üìÇ All books",
    settings: "‚öôÔ∏è Settings",
    contactInfo: "To contact the admins:\nüìû Phone: +998974634455\nüì≤ Telegram: @Sadikov001",
    bookAdded: "‚úÖ Book added!",
    adSent: "‚úÖ Ad sent!",
    adCanceled: "‚ùå Ad canceled."
  }
};

// Til menyusi
const languageMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: "üá∫üáø O'zbekcha", callback_data: "uz" }],
      [{ text: "üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data: "ru" }],
      [{ text: "üá¨üáß English", callback_data: "en" }],
    ],
  },
};

// Asosiy menyu
function getMainMenu(lang) {
  return {
    reply_markup: {
      keyboard: [
        [translations[lang].searchBook],
        [translations[lang].allBooks],
        [translations[lang].settings],
      ],
      resize_keyboard: true,
    },
  };
}

// Orqaga menyusi
function getBackMenu(lang) {
  return {
    reply_markup: {
      keyboard: [
        [translations[lang].back],
        [translations[lang].mainMenu],
      ],
      resize_keyboard: true,
    },
  };
}

// Foydalanuvchilarni saqlash
function saveUsers() {
  fs.writeFileSync(path.join(__dirname, "users.json"), JSON.stringify(users, null, 2));
}

// Kitoblarni saqlash
function saveBooks() {
  fs.writeFileSync(path.join(__dirname, "books.json"), JSON.stringify(books, null, 2));
}

// Reklamalarni saqlash
function saveAds() {
  fs.writeFileSync(path.join(__dirname, "ads.json"), JSON.stringify(ads, null, 2));
}

// Yangi foydalanuvchi qo'shish
function addUser(user) {
  const existingUser = users.find(u => u.id === user.id);
  if (!existingUser) {
    users.push({
      id: user.id,
      username: user.username || null,
      first_name: user.first_name,
      last_name: user.last_name || null,
      language: 'uz',
      joined_at: new Date().toISOString(),
      last_active: new Date().toISOString(),
      actions: []
    });
    saveUsers();
    return true;
  }
  return false;
}

// Foydalanuvchi tilini yangilash
function updateUserLanguage(userId, language) {
  const userIndex = users.findIndex(u => u.id === userId);
  if (userIndex !== -1) {
    users[userIndex].language = language;
    users[userIndex].last_active = new Date().toISOString();
    saveUsers();
    return true;
  }
  return false;
}

// Foydalanuvchi harakatini yangilash
function updateUserActivity(userId, action) {
  const userIndex = users.findIndex(u => u.id === userId);
  if (userIndex !== -1) {
    users[userIndex].last_active = new Date().toISOString();
    
    if (action) {
      if (!users[userIndex].actions) {
        users[userIndex].actions = [];
      }
      users[userIndex].actions.push({
        action,
        timestamp: new Date().toISOString()
      });
      
      if (users[userIndex].actions.length > 5) {
        users[userIndex].actions.shift();
      }
    }
    
    saveUsers();
    return true;
  }
  return false;
}

// Yangi kitob qo'shish
function addBook(bookData) {
  const newBook = {
    id: Date.now().toString(),
    name: bookData.name,
    author: bookData.author || "Noma'lum",
    genre: bookData.genre || "Boshqa",
    file_id: bookData.file_id || null,
    file_type: bookData.file_type || null,
    image_id: bookData.image_id || null,
    added_at: new Date().toISOString()
  };

  books.push(newBook);
  saveBooks();
  return newBook;
}

// Reklamalarni yuborish
async function broadcastAd(ad) {
  for (const user of users) {
    try {
      const lang = user.language || 'uz';

      if (ad.file_id) {
        const options = { 
          caption: ad.text,
          parse_mode: "Markdown"
        };

        if (ad.file_type === "photo") {
          await bot.sendPhoto(user.id, ad.file_id, options);
        } else if (ad.file_type === "video") {
          await bot.sendVideo(user.id, ad.file_id, options);
        } else if (ad.file_type === "document") {
          await bot.sendDocument(user.id, ad.file_id, options);
        }
      } else {
        await bot.sendMessage(user.id, ad.text, { parse_mode: "Markdown" });
      }

      updateUserActivity(user.id, "Reklama olindi");
    } catch (error) {
      console.error(`Foydalanuvchiga reklama yuborishda xato ${user.id}:`, error.message);
    }
  }
}

// Monitoring xabarlari
async function sendMonitoringInfo(action, user, additionalData = {}) {
  try {
    const userId = user.id;
    const now = new Date();
    const userObj = users.find(u => u.id === userId) || {};
    
    let message = `üë§ *Foydalanuvchi:* ${user.first_name} ${user.last_name || ''} (@${user.username || 'N/A'})\n`;
    message += `üÜî *ID:* ${userId}\n`;
    message += `üìÖ *Qo'shilgan:* ${new Date(userObj.joined_at || now).toLocaleDateString()}\n`;
    message += `üåê *Til:* ${userObj.language || 'uz'}\n`;
    message += `‚è∞ *So'nggi faollik:* ${now.toLocaleString()}\n\n`;
    message += `üìå *Harakat:* ${action}\n`;

    if (Object.keys(additionalData).length > 0) {
      message += `\nüìä *Tafsilotlar:* \`\`\`${JSON.stringify(additionalData, null, 2)}\`\`\`\n`;
    }

    if (userObj.actions?.length > 0) {
      message += `\nüîÑ *Oxirgi harakatlar:*`;
      userObj.actions.slice(-3).forEach((act, idx) => {
        message += `\n${idx + 1}. ${act.action} - ${new Date(act.timestamp).toLocaleTimeString()}`;
      });
    }

    if (monitoringMessages.has(userId)) {
      try {
        const msgId = monitoringMessages.get(userId);
        await monitoringBot.editMessageText(message, {
          chat_id: MONITORING_CHAT_ID,
          message_id: msgId,
          parse_mode: 'Markdown'
        });
      } catch (editError) {
        console.error("Xabarni yangilashda xato:", editError);
        const newMsg = await monitoringBot.sendMessage(
          MONITORING_CHAT_ID, 
          message, 
          { parse_mode: 'Markdown' }
        );
        monitoringMessages.set(userId, newMsg.message_id);
      }
    } else {
      const newMsg = await monitoringBot.sendMessage(
        MONITORING_CHAT_ID, 
        message, 
        { parse_mode: 'Markdown' }
      );
      monitoringMessages.set(userId, newMsg.message_id);
    }
  } catch (error) {
    console.error("Monitoringda xato:", error);
  }
}

// Server monitoringi uchun
const HEARTBEAT_INTERVAL = 5000; // 5 sekund

function sendHeartbeat() {
  const now = new Date().toLocaleString();
  console.log(`‚ù§Ô∏è Heartbeat at ${now}`);
  
  try {
    monitoringBot.sendMessage(
      MONITORING_CHAT_ID, 
      `üü¢ Server ishlayapti: ${now}\nüìä Statistikalar:\n- Foydalanuvchilar: ${users.length}\n- Kitoblar: ${books.length}\n- Reklamalar: ${ads.length}`,
      { disable_notification: true }
    );
  } catch (error) {
    console.error("Heartbeat xatosi:", error);
  }
}

// Ma'lumotlarni zaxiralash
function backupData() {
  try {
    const backupDir = path.join(__dirname, 'backups');
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir);
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    fs.copyFileSync(
      path.join(__dirname, 'users.json'),
      path.join(backupDir, `users_${timestamp}.json`)
    );
    
    fs.copyFileSync(
      path.join(__dirname, 'books.json'),
      path.join(backupDir, `books_${timestamp}.json`)
    );
    
    fs.copyFileSync(
      path.join(__dirname, 'ads.json'),
      path.join(backupDir, `ads_${timestamp}.json`)
    );
    
    console.log(`‚úÖ Ma'lumotlar zaxiralandi: ${timestamp}`);
  } catch (error) {
    console.error('‚õî Zaxiralashda xato:', error);
    monitoringBot.sendMessage(
      MONITORING_CHAT_ID,
      `‚õî *Zaxiralashda xato!*\n\n` +
      `üìå Xato: ${error.message}`,
      { parse_mode: "Markdown" }
    );
  }
}

// /start komandasi
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;

  const isNewUser = addUser({
    id: user.id,
    username: user.username,
    first_name: user.first_name,
    last_name: user.last_name
  });

  const lang = users.find(u => u.id === user.id)?.language || 'uz';

  if (isNewUser) {
    sendMonitoringInfo("Yangi foydalanuvchi qo'shildi", user);
    bot.sendMessage(chatId, translations[lang].welcome, languageMenu);
  } else {
    sendMonitoringInfo("Botni qayta ishga tushirdi", user);
    bot.sendMessage(chatId, translations[lang].chooseLanguage, languageMenu);
  }
  updateUserActivity(user.id, "Botni ishga tushirdi");
});

// /help komandasi
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';
  
  const helpText = lang === "uz" 
    ? `üìö *Kutubxona Boti Yordam Menyusi*\n\n` +
      `/start - Botni ishga tushirish\n` +
      `/help - Yordam menyusi\n` +
      `/contact - Adminlar bilan bog'lanish\n` +
      `üìö Kitob qidirish - Kitob izlash\n` +
      `üìÇ Barcha kitoblar - Janr bo'yicha kitoblar\n` +
      `‚öôÔ∏è Sozlamalar - Til sozlamalari\n\n` +
      `üë®‚Äçüíª Admin buyruqlari:\n` +
      `/addbook - Yangi kitob qo'shish\n` +
      `/addreklama - Reklama yuborish\n` +
      `/users - Foydalanuvchilar ro'yxati`
    : lang === "ru" 
    ? `üìö *–ü–æ–º–æ—â—å –ø–æ –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–æ–º—É –ë–æ—Ç—É*\n\n` +
      `/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n` +
      `/help - –ú–µ–Ω—é –ø–æ–º–æ—â–∏\n` +
      `/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏\n` +
      `üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ - –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É\n` +
      `üìÇ –í—Å–µ –∫–Ω–∏–≥–∏ - –ö–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä–∞–º\n` +
      `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
      `üë®‚Äçüíª –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n` +
      `/addbook - –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É\n` +
      `/addreklama - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É\n` +
      `/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
    : `üìö *Library Bot Help Menu*\n\n` +
      `/start - Start the bot\n` +
      `/help - Help menu\n` +
      `/contact - Contact admins\n` +
      `üìö Search book - Find a book\n` +
      `üìÇ All books - Books by genre\n` +
      `‚öôÔ∏è Settings - Language settings\n\n` +
      `üë®‚Äçüíª Admin commands:\n` +
      `/addbook - Add new book\n` +
      `/addreklama - Send advertisement\n` +
      `/users - Users list`;
  
  bot.sendMessage(chatId, helpText, { parse_mode: "Markdown" });
  updateUserActivity(msg.from.id, "Yordam menyusini ko'rdi");
});

// /contact komandasi
bot.onText(/\/contact/, (msg) => {
  const chatId = msg.chat.id;
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';

  sendMonitoringInfo("Kontakt ma'lumotlarini ko'rdi", user);
  bot.sendMessage(chatId, translations[lang].contactInfo, getMainMenu(lang));
  updateUserActivity(msg.from.id, "Kontakt ma'lumotlari");
});

// /stats komandasi (admin uchun)
bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';
  
  if (!ADMIN_IDS.includes(msg.from.id.toString())) {
    bot.sendMessage(chatId, translations[lang].noPermission, getMainMenu(lang));
    return;
  }
  
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  const newUsersToday = users.filter(u => new Date(u.joined_at) >= today).length;
  const activeUsersToday = users.filter(u => new Date(u.last_active) >= today).length;
  
  const statsText = lang === "uz" 
    ? `üìä *Bot statistikasi*\n\n` +
      `üë• Umumiy foydalanuvchilar: ${users.length}\n` +
      `üÜï Bugun qo'shilgan: ${newUsersToday}\n` +
      `üîÑ Bugun faol: ${activeUsersToday}\n` +
      `üìö Kitoblar: ${books.length}\n` +
      `üì¢ Reklamalar: ${ads.length}\n` +
      `‚è∞ Server vaqti: ${now.toLocaleString()}`
    : lang === "ru" 
    ? `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n` +
      `üÜï –ù–æ–≤—ã–µ —Å–µ–≥–æ–¥–Ω—è: ${newUsersToday}\n` +
      `üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è: ${activeUsersToday}\n` +
      `üìö –ö–Ω–∏–≥–∏: ${books.length}\n` +
      `üì¢ –†–µ–∫–ª–∞–º—ã: ${ads.length}\n` +
      `‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${now.toLocaleString()}`
    : `üìä *Bot statistics*\n\n` +
      `üë• Total users: ${users.length}\n` +
      `üÜï New today: ${newUsersToday}\n` +
      `üîÑ Active today: ${activeUsersToday}\n` +
      `üìö Books: ${books.length}\n` +
      `üì¢ Ads: ${ads.length}\n` +
      `‚è∞ Server time: ${now.toLocaleString()}`;
  
  bot.sendMessage(chatId, statsText, { parse_mode: "Markdown" });
  updateUserActivity(msg.from.id, "Statistikani ko'rdi");
});

// /addbook komandasi (admin uchun)
bot.onText(/\/addbook/, (msg) => {
  const chatId = msg.chat.id;
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';

  if (!ADMIN_IDS.includes(msg.from.id.toString())) {
    bot.sendMessage(chatId, translations[lang].noPermission, getMainMenu(lang));
    return;
  }

  sendMonitoringInfo("Kitob qo'shish bo'limiga kirdi", user);

  waitingForBook[chatId] = { step: "waiting_for_book_name" };
  bot.sendMessage(
    chatId, 
    lang === "uz" ? "üìñ Kitob nomini kiriting:" : lang === "ru" ? "üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:" : "üìñ Enter book name:",
    getBackMenu(lang)
  );
  updateUserActivity(msg.from.id, "Kitob qo'shish boshladi");
});

// /addreklama komandasi (admin uchun)
bot.onText(/\/addreklama/, (msg) => {
  const chatId = msg.chat.id;
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';

  if (!ADMIN_IDS.includes(msg.from.id.toString())) {
    bot.sendMessage(chatId, translations[lang].noPermission, getMainMenu(lang));
    return;
  }

  sendMonitoringInfo("Reklama qo'shish bo'limiga kirdi", user);

  waitingForAd[chatId] = { step: "waiting_for_ad_content" };
  bot.sendMessage(
    chatId, 
    lang === "uz" 
      ? "üì¢ Reklama kontentini yuboring (matn, rasm, video yoki hujjat):" 
      : lang === "ru" 
      ? "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∫–ª–∞–º—ã (—Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):" 
      : "üì¢ Send ad content (text, photo, video or document):",
    getBackMenu(lang)
  );
  updateUserActivity(msg.from.id, "Reklama qo'shish boshladi");
});

// /users komandasi (admin uchun)
bot.onText(/\/users/, (msg) => {
  const chatId = msg.chat.id;
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';

  if (!ADMIN_IDS.includes(msg.from.id.toString())) {
    bot.sendMessage(chatId, translations[lang].noPermission, getMainMenu(lang));
    return;
  }

  sendMonitoringInfo("Foydalanuvchilar ro'yxatini ko'rdi", user);

  if (users.length === 0) {
    bot.sendMessage(chatId, lang === "uz" ? "‚ùå Foydalanuvchilar topilmadi." : lang === "ru" ? "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." : "‚ùå No users found.", getMainMenu(lang));
    return;
  }

  let message = lang === "uz" 
    ? `üë• Foydalanuvchilar soni: ${users.length}\n\n`
    : lang === "ru" 
    ? `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n\n` 
    : `üë• Total users: ${users.length}\n\n`;

  const recentUsers = users.slice(-10).reverse();

  recentUsers.forEach((user, index) => {
    message += `${index + 1}. ${user.first_name} ${user.last_name || ''} (@${user.username || 'N/A'})\n`;
    message += `üÜî: ${user.id}\n`;
    message += `üìÖ Qo'shilgan: ${new Date(user.joined_at).toLocaleString()}\n`;
    message += `üåê ${user.language?.toUpperCase() || 'UZ'}\n\n`;
  });

  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ 
          text: lang === "uz" ? "üì• Foydalanuvchilarni yuklab olish" : lang === "ru" ? "üì• –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫" : "üì• Download list", 
          callback_data: "download_users" 
        }],
        [{ 
          text: lang === "uz" ? "üîô Orqaga" : lang === "ru" ? "üîô –ù–∞–∑–∞–¥" : "üîô Back", 
          callback_data: "back_to_main" 
        }]
      ]
    }
  });
  updateUserActivity(msg.from.id, "Foydalanuvchilar ro'yxatini ko'rdi");
});

// Xabarlarni qayta ishlash
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';

  if (!text) return;

  // Monitoring uchun harakatlarni yuborish
  if (text === translations[lang].searchBook) {
    sendMonitoringInfo("Kitob qidirish bo'limiga kirdi", user);
  } else if (text === translations[lang].allBooks) {
    sendMonitoringInfo("Barcha kitoblar bo'limiga kirdi", user);
  } else if (text === translations[lang].settings) {
    sendMonitoringInfo("Sozlamalar bo'limiga kirdi", user);
  } else if (text && !text.startsWith('/')) {
    sendMonitoringInfo("Kitob qidiruv so'rovi", user, { sorov: text });
  }

  // Orqaga tugmasi
  if (text === translations[lang].back) {
    bot.sendMessage(chatId, translations[lang].back, getMainMenu(lang));
    updateUserActivity(msg.from.id, "Orqaga qaytdi");
    return;
  }

  // Asosiy menyu tugmasi
  if (text === translations[lang].mainMenu) {
    bot.sendMessage(chatId, translations[lang].mainMenu, getMainMenu(lang));
    updateUserActivity(msg.from.id, "Asosiy menyuga qaytdi");
    return;
  }

  // Kitob qidirish
  if (text === translations[lang].searchBook) {
    bot.sendMessage(chatId, lang === "uz" ? "üìö Kitob nomi, muallif yoki janr bo'yicha qidiring." : lang === "ru" ? "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –∂–∞–Ω—Ä." : "üìö Search by name, author or genre.", getBackMenu(lang));
    updateUserActivity(msg.from.id, "Kitob qidirishni boshladi");
    return;
  }

  // Barcha kitoblar
  if (text === translations[lang].allBooks) {
    bot.sendMessage(chatId, lang === "uz" ? "Janrni tanlang:" : lang === "ru" ? "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:" : "Choose genre:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "Podkast", callback_data: "genre_Podkast" }, { text: "Audio Dars", callback_data: "genre_Audio Dars" }],
          [{ text: "Badiiy", callback_data: "genre_Badiiy" }, { text: "Ilmiy", callback_data: "genre_Ilmiy" }],
          [{ text: "Darslik", callback_data: "genre_Darslik" }, { text: "Boshqa", callback_data: "genre_Boshqa" }],
          [{ text: "Shaxsiy Rivojlanish", callback_data: "genre_Shaxsiy Rivojlanish" }],
          [{ text: "Detektiv", callback_data: "genre_Detektiv" }],
          [{ text: lang === "uz" ? "Barchasi" : lang === "ru" ? "–í—Å–µ" : "All", callback_data: "genre_all" }],
          [{ text: translations[lang].back, callback_data: "back_to_main" }],
        ],
      },
    });
    updateUserActivity(msg.from.id, "Barcha kitoblar bo'limiga kirdi");
    return;
  }

  // Kitob qo'shish jarayoni
  if (waitingForBook[chatId] && ADMIN_IDS.includes(msg.from.id.toString())) {
    if (waitingForBook[chatId].step === "waiting_for_book_name") {
      waitingForBook[chatId].name = text;
      waitingForBook[chatId].step = "waiting_for_book_author";
      bot.sendMessage(
        chatId, 
        lang === "uz" ? "‚úçÔ∏è Muallifni kiriting:" : lang === "ru" ? "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:" : "‚úçÔ∏è Enter author:",
        getBackMenu(lang)
      );
      updateUserActivity(msg.from.id, "Kitob nomini kiritdi");
      return;
    }

    if (waitingForBook[chatId].step === "waiting_for_book_author") {
      waitingForBook[chatId].author = text;
      waitingForBook[chatId].step = "waiting_for_book_genre";
      bot.sendMessage(
        chatId, 
        lang === "uz" ? "üìÇ Janrni tanlang:" : lang === "ru" ? "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:" : "üìÇ Choose genre:",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "Podkast", callback_data: "book_genre_Podkast" }, { text: "Audio Dars", callback_data: "book_genre_Audio Dars" }],
              [{ text: "Badiiy", callback_data: "book_genre_Badiiy" }, { text: "Ilmiy", callback_data: "book_genre_Ilmiy" }],
              [{ text: "Darslik", callback_data: "book_genre_Darslik" }, { text: "Boshqa", callback_data: "book_genre_Boshqa" }],
              [{ text: "Shaxsiy Rivojlanish", callback_data: "book_genre_Shaxsiy Rivojlanish" }],
              [{ text: "Detektiv", callback_data: "book_genre_Detektiv" }],
              [{ text: translations[lang].back, callback_data: "back_to_main" }],
            ],
          },
        }
      );
      updateUserActivity(msg.from.id, "Kitob muallifini kiritdi");
      return;
    }
  }

  // Reklama jarayoni
  if (waitingForAd[chatId] && waitingForAd[chatId].step === "waiting_for_ad_content" && ADMIN_IDS.includes(msg.from.id.toString())) {
    if (text) {
      waitingForAd[chatId].text = text;
      waitingForAd[chatId].step = "waiting_for_ad_confirmation";

      const previewText = lang === "uz" 
        ? "üì¢ Reklama namoyishi:\n\n" + waitingForAd[chatId].text
        : lang === "ru" 
        ? "üì¢ –ü—Ä–µ–≤—å—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n" + waitingForAd[chatId].text
        : "üì¢ Ad preview:\n\n" + waitingForAd[chatId].text;

      if (waitingForAd[chatId].file_id) {
        const options = { 
          caption: previewText,
          parse_mode: "Markdown"
        };

        if (waitingForAd[chatId].file_type === "photo") {
          await bot.sendPhoto(chatId, waitingForAd[chatId].file_id, options);
        } else if (waitingForAd[chatId].file_type === "video") {
          await bot.sendVideo(chatId, waitingForAd[chatId].file_id, options);
        } else if (waitingForAd[chatId].file_type === "document") {
          await bot.sendDocument(chatId, waitingForAd[chatId].file_id, options);
        }
      } else {
        await bot.sendMessage(chatId, previewText, { parse_mode: "Markdown" });
      }

      bot.sendMessage(
        chatId, 
        lang === "uz" 
          ? "‚úÖ Reklamani yuborishni tasdiqlaysizmi?" 
          : lang === "ru" 
          ? "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É?" 
          : "‚úÖ Confirm sending?",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: lang === "uz" ? "‚úÖ Tasdiqlash" : lang === "ru" ? "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" : "‚úÖ Confirm", callback_data: "confirm_ad" }],
              [{ text: lang === "uz" ? "‚ùå Bekor qilish" : lang === "ru" ? "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" : "‚ùå Cancel", callback_data: "cancel_ad" }],
              [{ text: translations[lang].back, callback_data: "back_to_main" }],
            ],
          },
        }
      );
      updateUserActivity(msg.from.id, "Reklama matnini kiritdi");
    }
    return;
  }

  // Kitob qidiruv funksiyasi
  if (text !== "/start") {
    const results = books.filter(
      (b) => b.id === text || 
             b.name.toLowerCase().includes(text.toLowerCase()) || 
             b.author?.toLowerCase().includes(text.toLowerCase()) || 
             b.genre?.toLowerCase().includes(text.toLowerCase())
    );

    if (results.length) {
      results.forEach((book) => {
        let caption = `üìñ *${book.name}*\nüë§ *${lang === "uz" ? "Muallif" : lang === "ru" ? "–ê–≤—Ç–æ—Ä" : "Author"}:* ${book.author}\nüìÇ *${lang === "uz" ? "Janr" : lang === "ru" ? "–ñ–∞–Ω—Ä" : "Genre"}:* ${book.genre}\n\n${CHANNEL_LINK}`;
        
        if (book.file_id) {
          const options = { 
            caption, 
            parse_mode: "Markdown",
            reply_markup: getBackMenu(lang).reply_markup
          };

          switch(book.file_type) {
            case "document":
              bot.sendDocument(chatId, book.file_id, options);
              break;
            case "photo":
              bot.sendPhoto(chatId, book.file_id, options);
              break;
            case "video":
              bot.sendVideo(chatId, book.file_id, options);
              break;
            case "audio":
              bot.sendAudio(chatId, book.file_id, options);
              break;
            case "voice":
              bot.sendVoice(chatId, book.file_id, options);
              break;
          }
        } else {
          bot.sendMessage(
            chatId, 
            `‚ö†Ô∏è ${book.name} ${lang === "uz" ? "kitobi mavjud, lekin fayli yo'q." : lang === "ru" ? "–µ—Å—Ç—å, –Ω–æ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç." : "exists but file is missing."}`, 
            { 
              parse_mode: "Markdown",
              reply_markup: getBackMenu(lang).reply_markup
            }
          );
        }
      });
    } else {
      bot.sendMessage(
        chatId, 
        translations[lang].bookNotFound,
        getBackMenu(lang)
      );
    }
    updateUserActivity(msg.from.id, `"${text}" bo'yicha qidiruv`);
  }
});

// Fayllarni qayta ishlash
bot.on("document", (msg) => processFile(msg, "document"));

bot.on("photo", (msg) => processFile(msg, "photo"));
bot.on("video", (msg) => processFile(msg, "video"));
bot.on("audio", (msg) => processFile(msg, "audio"));
bot.on("voice", (msg) => processFile(msg, "voice"));

async function processFile(msg, type) {
  const chatId = msg.chat.id;
  const user = users.find(u => u.id === msg.from.id);
  const lang = user?.language || 'uz';

  // Reklama fayli uchun
  if (waitingForAd[chatId] && waitingForAd[chatId].step === "waiting_for_ad_content" && ADMIN_IDS.includes(msg.from.id.toString())) {
    let file_id = type === "photo" ? msg.photo[msg.photo.length - 1].file_id : msg[type].file_id;
    waitingForAd[chatId].file_id = file_id;
    waitingForAd[chatId].file_type = type;

    bot.sendMessage(
      chatId, 
      lang === "uz" 
        ? "üìù Reklama uchun matn yozing:" 
        : lang === "ru" 
        ? "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:" 
        : "üìù Write ad text:",
      getBackMenu(lang)
    );
    updateUserActivity(msg.from.id, "Reklama faylini yubordi");
    return;
  }

  // Kitob fayli uchun
  if (waitingForBook[chatId] && waitingForBook[chatId].step === "waiting_for_book_file" && ADMIN_IDS.includes(msg.from.id.toString())) {
    let file_id = type === "photo" ? msg.photo[msg.photo.length - 1].file_id : msg[type].file_id;
    waitingForBook[chatId].file_id = file_id;
    waitingForBook[chatId].file_type = type;

    // Agar rasm yuborilgan bo'lsa, kitob faylini so'raymiz
    if (type === "photo") {
      waitingForBook[chatId].image_id = file_id;
      bot.sendMessage(
        chatId, 
        lang === "uz" 
          ? "üìÑ Kitob faylini (PDF yoki boshqa formatda) yuboring:" 
          : lang === "ru" 
          ? "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ (PDF –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç):" 
          : "üìÑ Send book file (PDF or other):",
        getBackMenu(lang)
      );
    } else {
      // Kitobni qo'shamiz
      const newBook = addBook(waitingForBook[chatId]);

      bot.sendMessage(
        chatId, 
        lang === "uz" 
          ? `‚úÖ Kitob qo'shildi!\n\nüìñ Nomi: ${newBook.name}\nüë§ Muallif: ${newBook.author}\nüìÇ Janr: ${newBook.genre}` 
          : lang === "ru" 
          ? `‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüìñ –ù–∞–∑–≤–∞–Ω–∏–µ: ${newBook.name}\nüë§ –ê–≤—Ç–æ—Ä: ${newBook.author}\nüìÇ –ñ–∞–Ω—Ä: ${newBook.genre}` 
          : `‚úÖ Book added!\n\nüìñ Name: ${newBook.name}\nüë§ Author: ${newBook.author}\nüìÇ Genre: ${newBook.genre}`,
        getMainMenu(lang)
      );

      delete waitingForBook[chatId];
    }
    updateUserActivity(msg.from.id, "Kitob faylini yubordi");
    return;
  }
}

// Callback query handler
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const user = users.find(u => u.id === query.from.id);
  const lang = user?.language || 'uz';
  const data = query.data;

  // Til tanlash
  if (["uz", "ru", "en"].includes(data)) {
    updateUserLanguage(query.from.id, data);
    bot.sendMessage(chatId, data === "uz" ? "Til tanlandi!" : data === "ru" ? "–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω!" : "Language selected!", getMainMenu(data));
    updateUserActivity(query.from.id, `Tilni ${data} ga o'zgartirdi`);
    return;
  }

  // Kitoblar ro'yxati uchun janr tanlash
  if (data.startsWith("genre_")) {
    const genre = data.replace("genre_", "");
    let filteredBooks = genre === "all" ? books : books.filter((b) => b.genre === genre);

    if (filteredBooks.length) {
      let message = lang === "uz" ? "üìö Kitoblar ro'yxati:" : lang === "ru" ? "üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:" : "üìö Books list:";
      filteredBooks.forEach((book, index) => {
        message += `\n\n${index + 1}. *${book.name}* (${book.author})\nüìÇ ${lang === "uz" ? "Janr" : lang === "ru" ? "–ñ–∞–Ω—Ä" : "Genre"}: ${book.genre}\nüÜî ID: ${book.id}`;
      });
      bot.sendMessage(chatId, message, { 
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: lang === "uz" ? "üîô Orqaga" : lang === "ru" ? "üîô –ù–∞–∑–∞–¥" : "üîô Back", callback_data: "back_to_main" }]
          ]
        }
      });
    } else {
      bot.sendMessage(
        chatId, 
        lang === "uz" ? "‚ùå Ushbu janrda kitob yo'q." : lang === "ru" ? "‚ùå –ù–µ—Ç –∫–Ω–∏–≥ –≤ —ç—Ç–æ–º –∂–∞–Ω—Ä–µ." : "‚ùå No books in this genre.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: lang === "uz" ? "üîô Orqaga" : lang === "ru" ? "üîô –ù–∞–∑–∞–¥" : "üîô Back", callback_data: "back_to_main" }]
            ]
          }
        }
      );
    }
    updateUserActivity(query.from.id, `${genre} janridagi kitoblarni ko'rdi`);
    return;
  }

  // Kitob qo'shish uchun janr tanlash
  if (data.startsWith("book_genre_")) {
    const genre = data.replace("book_genre_", "");
    waitingForBook[chatId].genre = genre;
    waitingForBook[chatId].step = "waiting_for_book_file";

    bot.sendMessage(
      chatId, 
      lang === "uz" 
        ? "üñº Kitob uchun rasm yuboring:" 
        : lang === "ru" 
        ? "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–Ω–∏–≥–∏:" 
        : "üñº Send image for book:",
      getBackMenu(lang)
    );
    updateUserActivity(query.from.id, "Kitob janrini tanladi");
    return;
  }

  // Reklamani tasdiqlash
  if (data === "confirm_ad") {
    const adId = Date.now().toString();

    const newAd = {
      id: adId,
      text: waitingForAd[chatId].text,
      file_id: waitingForAd[chatId].file_id,
      file_type: waitingForAd[chatId].file_type,
      created_at: new Date().toISOString(),
    };

    ads.push(newAd);
    saveAds();

    broadcastAd(newAd);

    bot.sendMessage(
      chatId, 
      lang === "uz" 
        ? "‚úÖ Reklama yuborildi!" 
        : lang === "ru" 
        ? "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" 
        : "‚úÖ Ad sent!",
      getMainMenu(lang)
    );

    delete waitingForAd[chatId];
    updateUserActivity(query.from.id, "Reklamani tasdiqladi");
    return;
  }

  // Reklamani bekor qilish
  if (data === "cancel_ad") {
    bot.sendMessage(
      chatId, 
      lang === "uz" 
        ? "‚ùå Reklama bekor qilindi." 
        : lang === "ru" 
        ? "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." 
        : "‚ùå Ad canceled.",
      getMainMenu(lang)
    );
    delete waitingForAd[chatId];
    updateUserActivity(query.from.id, "Reklamani bekor qildi");
    return;
  }

  // Foydalanuvchilarni yuklab olish
  if (data === "download_users") {
    try {
      const csvContent = "ID,Username,First Name,Last Name,Language,Joined At,Last Active\n" +
        users.map(user => 
          `${user.id},${user.username || ''},${user.first_name},${user.last_name || ''},${user.language || 'uz'},${user.joined_at},${user.last_active}`
        ).join("\n");

      fs.writeFileSync(path.join(__dirname, "users.csv"), csvContent);

      await bot.sendDocument(chatId, path.join(__dirname, "users.csv"), {
        caption: lang === "uz" 
          ? "üìä Foydalanuvchilar ro'yxati" 
          : lang === "ru" 
          ? "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" 
          : "üìä Users list",
        reply_markup: {
          inline_keyboard: [
            [{ text: lang === "uz" ? "üîô Orqaga" : lang === "ru" ? "üîô –ù–∞–∑–∞–¥" : "üîô Back", callback_data: "back_to_main" }]
          ]
        }
      });

      fs.unlinkSync(path.join(__dirname, "users.csv"));
    } catch (error) {
      console.error("Xato:", error);
      bot.sendMessage(
        chatId, 
        lang === "uz" 
          ? "‚ùå Foydalanuvchilarni yuklab bo'lmadi." 
          : lang === "ru" 
          ? "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." 
          : "‚ùå Failed to download users.",
        getMainMenu(lang)
      );
    }
    updateUserActivity(query.from.id, "Foydalanuvchilarni yuklashga urindi");
    return;
  }

  // Asosiy menyuga qaytish
  if (data === "back_to_main") {
    bot.sendMessage(
      chatId, 
      lang === "uz" ? "Asosiy menyu" : lang === "ru" ? "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" : "Main menu", 
      getMainMenu(lang)
    );
    updateUserActivity(query.from.id, "Asosiy menyuga qaytdi");
    return;
  }
});

// Monitoring bot uchun start komandasi
monitoringBot.onText(/\/start/, (msg) => {
  monitoringBot.sendMessage(msg.chat.id, "üëÆ‚Äç‚ôÇÔ∏è Bu bot faqat monitoring uchun ishlatiladi. U kutubxona botidagi harakatlarni kuzatib boradi va adminlarga xabar beradi.");
});

console.log("‚úÖ Kutubxona boti ishga tushdi...");
console.log("‚úÖ Monitoring boti ishga tushdi...");